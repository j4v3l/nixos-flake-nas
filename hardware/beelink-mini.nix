# Do not modify this file!  It was generated by 'nixos-generate-config'
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ 
    "xhci_pci" "nvme" "nvme-core" "usb_storage" "usbhid" "sd_mod" "sdhci_pci" 
    "ahci" "ata_piix" "ata_generic" "pata_acpi"
  ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" "nvme" "nvme-core" ];
  boot.extraModulePackages = [ ];
  
  # Enable all NVMe and storage-related kernel modules for 6-slot support
  boot.initrd.includeDefaultModules = true;

  # Boot parameters to stabilize Intel graphics and fix FIFO underrun errors
  boot.kernelParams = [
    "i915.enable_guc=2"           # Enable GuC firmware
    "i915.enable_fbc=1"           # Enable framebuffer compression
    "intel_iommu=igfx_off"        # Disable IOMMU for Intel graphics
  ];

  # Intel graphics configuration to fix transcoder errors
  hardware.graphics = {
    enable = true;
    enable32Bit = true;
    
    extraPackages = with pkgs; [
      intel-media-driver  # VAAPI driver for newer Intel graphics (>=2018)
      vaapiIntel          # Legacy VAAPI driver for older Intel graphics
      vaapiVdpau
      libvdpau-va-gl
    ];
  };

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/c70264c5-a59c-40b0-9018-989fa43df239";
      fsType = "ext4";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/39BC-94DA";
      fsType = "vfat";
      options = [ "fmask=0077" "dmask=0077" ];
    };

  swapDevices =
    [ { device = "/dev/disk/by-uuid/66b2d4f7-0f4b-40e2-ab7e-902b3cb7e289"; }
    ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp1s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp2s0.useDHCP = lib.mkDefault true;
  
  # WiFi interface configuration - enabled when WiFi module is active
  # Uncomment and adjust interface name if needed
  networking.interfaces.wlo1.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}